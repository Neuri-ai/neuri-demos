(()=>{"use strict";class t extends HTMLElement{constructor(){super(),this.$eventDetails={},this.$onStart=new CustomEvent("onStart",{bubbles:!0,composed:!0,cancelable:!0,detail:{message:"Starting"}}),this.$onInitilized=new CustomEvent("onInitilized",{bubbles:!0,composed:!0,cancelable:!0,detail:{message:"initialized"}}),this.$onspeech=new CustomEvent("onSpeech",{bubbles:!0,composed:!0,cancelable:!0,detail:this.$eventDetails}),this.$onResult=new CustomEvent("onResult",{bubbles:!0,composed:!0,cancelable:!0,detail:this.$eventDetails}),this.$onError=new CustomEvent("onError",{bubbles:!0,composed:!0,cancelable:!0,detail:this.$eventDetails}),this.shadowDOM=this.attachShadow({mode:"open"})}connectedCallback(){this.mapComponentAttributes(),this.render(),this.initComponent()}mapComponentAttributes(){["apiKey","lang","realtime","service","placement","size","backgroundColor","iconColor","typography","cssUrl","iconSize","iconColor","iconHoverColor","activeBgColor"].forEach((t=>{if(("apiKey"===t||"lang"===t)&&!this.hasAttribute(t))throw new Error(`${t} is required`);"realtime"!==t&&"hide"!==t||this.hasAttribute(t)||this.setAttribute(t,"false"),"service"===t&&(this.hasAttribute(t)||this.setAttribute(t,"default")),this.attributes||(this.attributes[t]={value:""})}))}render(){this.shadowDOM.innerHTML=`\n\t\t\t${this.templateCss()}\n\t\t\t${this.template()}\n\t\t`}initComponent(){this.$component=this.shadowDOM.querySelector(".push-to-talk-box");let t=this.shadowDOM.querySelector(".rounded-microphone-icon-button");this.shadowDOM.querySelector(".micrpohone-container"),this.shadowDOM.querySelector(".push-help-text"),this.loadSpeechRecognition(),t.onclick=()=>{this.$recognition.start()},window.addEventListener("onStart",(t=>{console.log("heeeelp")}))}loadSpeechRecognition(){const t=window.webkitSpeechRecognition||window.SpeechRecognition;this.$recognition=new t,this.$recognition.interimResults=""!==this.attributes.realtime.value,this.$recognition.lang=this.attributes.lang.value,this.dispatchEvent(this.$onStart),this.$recognition.onstart=()=>{this.dispatchEvent(this.$onInitilized)},this.$recognition.onspeechend=()=>{this.$recognition.stop(),this.dispatchEvent(this.$onResult)},this.$recognition.onresult=t=>{"true"===this.attributes.realtime.value&&this.dispatchEvent(this.$onspeech)}}disconnectedCallback(){this.remove()}defaultStyles(){return`\n\t\t.push-to-talk-box {\n\t\t\tposition: absolute;\n\t\t\tbottom: 0;\n\t\t\ttext-align: center;\n\t\t\twidth: 100%;\n\t\t}\n\t\t.push-help-text{\n\t\t\tdisplay: none;\n\t\t}\n\t\tbutton.rounded-microphone-icon-button{\n\t\t\twidth: ${this.attributes.size?this.attributes.size.value:"68px"};\n\t\t\theight: ${this.attributes.size?this.attributes.size.value:"68px"};\n\t\t\tborder-radius: 50%;\n\t\t\tbackground: ${this.attributes.backgroundColor?this.attributes.backgroundColor.value:"linear-gradient(180deg, #518EF8 0%, #1163FF 100%)"};\n\t\t\tborder: none;\n\t\t\tcursor: pointer;\n\t\t}\n\t\tbutton.rounded-microphone-icon-button:hover{\n\t\t\tbackground: ${this.attributes.activeBgColor?this.attributes.activeBgColor.value:"#1163FF"};\n\t\t}\n\t\t`}templateCss(){return this.attributes.cssUrl?`<link rel="stylesheet" href="${this.attributes.cssUrl.value}">`:`<style>${this.defaultStyles()}</style>`}template(){return'\n\t\t<div class="push-to-talk-box">\n\t\t\t<div class="push-to-talk-box-wave"></div>\n\t\t\t<div class="push-help-text">\n\t\t\t\t<p>Press the spacebar or click the button to start speaking.</p>\n\t\t\t</div>\n\t\t\t<div class="micrpohone-container">\n\t\t\t\t<button class="btn btn-primary rounded-microphone-icon-button" >\n\t\t\t\t\t<i class="microphone-icon"></i>\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t'}}const e=t;window.customElements.get("push-to-talk")||window.customElements.define("push-to-talk",e)})();